#!/usr/bin/env bash
set -euo pipefail

function usage {
  cat <<EOF
commit-msg-suggest [--verbose] [--context TEXT|-] [--model MODEL] [--cached] [--help] [git-diff-arguments...]

Suggest a git commit message using an LLM based on your code changes.

Options:
  -C, --context TEXT   Add additional context for the commit message, appended to the system prompt.
      --context -      Read additional context from stdin
  -m, --model MODEL    Specify the LLM model to use (default: gemma3:4b)
      --cached         Use staged changes (same as git diff --cached)
  -v, --verbose        Enable verbose output
  -h, --help           Show this help message

Examples:
  commit-msg-suggest --cached
  commit-msg-suggest --context "Hotfix for production"
  commit-msg-suggest -- src/app.js

Depends on:
- ollama: https://github.com/ollama/ollama
EOF
  exit "${1:-0}"
}

git_args=()
additional_context=""
model="gemma3:4b"
use_cached=false

while [[ $# -gt 0 ]]; do
  case "$1" in
    -v|--verbose)
      set -x
      shift
      ;;
    -C|--context)
      shift
      if [[ $# -gt 0 ]]; then
        if [[ "$1" == "-" ]]; then
          if [[ -t 0 ]]; then
            echo "No stdin input available for --context -" >&2
            usage 1
          fi
          new_context=$(cat)
          if [[ -z "$new_context" ]]; then
            echo "Empty input from stdin for --context -" >&2
            usage 1
          fi
        else
          new_context=$1
        fi
        if [[ -n "$additional_context" ]]; then
          additional_context="${additional_context}

$new_context"
        else
          additional_context="$new_context"
        fi
        shift
      else
        echo "Missing value for --context option" >&2
        usage 1
      fi
      ;;
    -m|--model)
      shift
      if [[ $# -gt 0 ]]; then
        model="$1"
        shift
      else
        echo "Missing value for --model option" >&2
        usage 1
      fi
      ;;
    --cached)
      use_cached=true
      shift
      ;;
    -h|--help)
      usage
      ;;
    *)
      git_args+=("$1")
      shift
      ;;
  esac
done

readonly BBlack='\e[1;30m'
readonly RESET='\033[0m'
readonly CYAN='\033[0;36m'
readonly DIM='\x1b[2m'

label() {
  printf "${BBlack}%s${RESET}" "$1" >&2
}

value() {
  printf " ${CYAN}%s${RESET}\n" "$1" >&2
}

if ! command -v ollama >/dev/null 2>&1; then
  echo "Missing required command ollama." >&2
  exit 1
fi

if [[ "$use_cached" == true ]]; then
  found_cached=false
  for arg in "${git_args[@]}"; do
    if [[ "$arg" == "--cached" ]]; then
      found_cached=true
      break
    fi
  done
  if [[ "$found_cached" == false ]]; then
    git_args+=("--cached")
  fi
fi

diff_output=$(git diff "${git_args[@]}" 2>/dev/null)
if [[ -z "$diff_output" ]]; then
  echo "No changes found to suggest commit message." >&2
  exit 1
fi

recent_commits=$(git log -n 5 --pretty=%s 2>/dev/null || echo "")
prompt="Suggest a concise, clear, and conventional git commit message for the following changes.
- Follow the Conventional Commits specification (https://www.conventionalcommits.org/).
- Use the format: type(scope): subject
- Do NOT capitalize the first letter of type or subject.
- Summarize the purpose and impact of the changes in the subject.
- Use an abstract, meaningful, and self-explanatory subject line.
- If needed, provide additional details or specifics in the commit message body.
- Output only the commit message, no explanations or commentary.

Context:
Reference previous commit messages:
$recent_commits

Diff:
\`\`\`diff
$diff_output
\`\`\`
"

if [[ -n "$additional_context" ]]; then
  prompt="$prompt
Additional context:
$additional_context
"
fi

# log info {{{

if [[ -n "$additional_context" ]]; then
  label "Additional context:"
  value ""
  echo "$additional_context" | sed 's/^/  /' >&2
fi

label "Model:"
value "$model"

label "Diff arguments:"
value "${git_args[*]}"

echo "$recent_commits" | sed 's/^/  /' >&2

# }}}

printf "${DIM}--------------------------${RESET}\n" >&2

commit_message=$(ollama run --hidethinking "$model" "$prompt")
echo "$commit_message"
